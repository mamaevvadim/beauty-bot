import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = "7969547988:AAH6HDCiyVWC1Bf4b9-KbpF9t4YN3Pq-uZg"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class Booking(StatesGroup):
    service = State()
    master = State()
    time = State()
    name = State()
    phone = State()

@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book"),
        InlineKeyboardButton("üíá –£—Å–ª—É–≥–∏", callback_data="services"),
        InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã", callback_data="faq"),
        InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
    )
    await message.answer_photo(photo="https://i.imgur.com/DeNIkQm.jpeg", caption=(
        "üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã BEAUTY BOSS! üå∏\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá"
    ), reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "book")
async def start_booking(callback_query: types.CallbackQuery):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üíÖ –ú–∞–Ω–∏–∫—é—Ä", callback_data="service_–ú–∞–Ω–∏–∫—é—Ä"),
        InlineKeyboardButton("üíá –°—Ç—Ä–∏–∂–∫–∞", callback_data="service_–°—Ç—Ä–∏–∂–∫–∞"),
        InlineKeyboardButton("üé® –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ", callback_data="service_–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ"),
        InlineKeyboardButton("üëÅ –ë—Ä–æ–≤–∏", callback_data="service_–ë—Ä–æ–≤–∏")
    )
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=kb)
    await Booking.service.set()

@dp.callback_query_handler(lambda c: c.data.startswith("service_"), state=Booking.service)
async def choose_master(callback_query: types.CallbackQuery, state: FSMContext):
    service = callback_query.data.split("_")[1]
    await state.update_data(service=service)

    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üë±‚Äç‚ôÄÔ∏è –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", callback_data="master_–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞"),
        InlineKeyboardButton("üë©‚Äçü¶∞ –ú–∞—Ä–∏—è", callback_data="master_–ú–∞—Ä–∏—è"),
        InlineKeyboardButton("üë§ –ù–µ –≤–∞–∂–Ω–æ", callback_data="master_–ù–µ –≤–∞–∂–Ω–æ")
    )
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=kb)
    await Booking.next()

@dp.callback_query_handler(lambda c: c.data.startswith("master_"), state=Booking.master)
async def choose_time(callback_query: types.CallbackQuery, state: FSMContext):
    master = callback_query.data.split("_")[1]
    await state.update_data(master=master)

    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üìÜ –°–µ–≥–æ–¥–Ω—è", callback_data="time_–°–µ–≥–æ–¥–Ω—è"),
        InlineKeyboardButton("üìÜ –ó–∞–≤—Ç—Ä–∞", callback_data="time_–ó–∞–≤—Ç—Ä–∞"),
        InlineKeyboardButton("üìù –£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="time_–£–∫–∞–∑–∞—Ç—å")
    )
    await bot.send_message(callback_query.from_user.id, "–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?", reply_markup=kb)
    await Booking.next()

@dp.callback_query_handler(lambda c: c.data.startswith("time_"), state=Booking.time)
async def ask_name(callback_query: types.CallbackQuery, state: FSMContext):
    time = callback_query.data.split("_")[1]
    if time == "–£–∫–∞–∑–∞—Ç—å":
        await bot.send_message(callback_query.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:")
    else:
        await state.update_data(time=time)
        await bot.send_message(callback_query.from_user.id, "–í–∞—à–µ –∏–º—è?")
        await Booking.name.set()
        return
    await state.update_data(time="–≤—Ä—É—á–Ω—É—é")
    await Booking.time.set()

@dp.message_handler(state=Booking.time)
async def manual_time(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text)
    await message.answer("–í–∞—à–µ –∏–º—è?")
    await Booking.name.set()

@dp.message_handler(state=Booking.name)
async def ask_phone(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True))
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:", reply_markup=kb)
    await Booking.phone.set()

@dp.message_handler(content_types=types.ContentType.CONTACT, state=Booking.phone)
async def confirm(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    data = await state.get_data()
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å:\n"
        f"–£—Å–ª—É–≥–∞: {data['service']}\n"
        f"–ú–∞—Å—Ç–µ—Ä: {data['master']}\n"
        f"–í—Ä–µ–º—è: {data['time']}\n"
        f"–ò–º—è: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        "–°–∫–æ—Ä–æ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è üíñ", reply_markup=types.ReplyKeyboardRemove()
    )
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "services")
async def show_services(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id,
        "üíÖ –ú–∞–Ω–∏–∫—é—Ä ‚Äî –æ—Ç 1200 ‚ÇΩ\n"
        "üíá –°—Ç—Ä–∏–∂–∫–∞ ‚Äî –æ—Ç 1500 ‚ÇΩ\n"
        "üé® –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ ‚Äî –æ—Ç 2500 ‚ÇΩ\n"
        "üëÅ –ë—Ä–æ–≤–∏ ‚Äî –æ—Ç 1000 ‚ÇΩ")

@dp.callback_query_handler(lambda c: c.data == "faq")
async def show_faq(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id,
        "üïí –†–∞–±–æ—Ç–∞–µ–º —Å 10:00 –¥–æ 21:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.\n"
        "üìç –ï—Å—Ç—å –ø–∞—Ä–∫–æ–≤–∫–∞\n"
        "üí≥ –ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞–ª–∏—á–Ω—ã–µ –∏ –∫–∞—Ä—Ç—ã\n"
        "‚õî –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –º–æ–∂–Ω–æ –∑–∞ 2 —á–∞—Å–∞")

@dp.callback_query_handler(lambda c: c.data == "contacts")
async def show_contacts(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id,
        "üìç –ê–¥—Ä–µ—Å: –ú–æ—Å–∫–≤–∞, —É–ª. –ö—Ä–∞—Å–æ—Ç—ã, 15\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (900) 123-45-67\n"
        "üì± WhatsApp: @salonadmin")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)